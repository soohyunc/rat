#!/bin/sh
#
# Configure script for rat. This script determines the type of machine it's
# running on, and builds a Makefile with the appropriate macro definitions
# to set up the machine specific includes etc.
#
# Copyright (c) 1998-99 University College London
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#      This product includes software developed by the Computer Science
#      Department at University College London
# 4. Neither the name of the University nor of the Department may be used
#    to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

GCCWFLAGS="-W -Wall -Wbad-function-cast -Wmissing-prototypes -Werror -Wno-implicit-int"
TCL_LIBS="../tk-8.0/unix/libtk8.0.a ../tcl-8.0/unix/libtcl8.0.a"
TCL_INCL="-I../tk-8.0/generic -I../tcl-8.0/generic"
VERSION=`cat VERSION`
DEFS=""
AR="ar"
ECHO="echo"
RANLIB="ranlib"

OSTYPE=`uname -s`
case $OSTYPE in
  SunOS                  ) OSTYPE=`uname -s`_`uname -r | awk -F. '{print $1}'`
  			   if [ $OSTYPE = SunOS_4 ]; then
			   	OSTYPE=SunOS
			   elif [ $OSTYPE = SunOS_5 ]; then
			   	OSTYPE=Solaris
			   fi
                           ;;
  HP-UX                  ) OSTYPE=HPUX
                           ;;
  IRIX64		 ) OSTYPE=IRIX
                           ;;
  Linux | IRIX | FreeBSD | NetBSD ) 
                           ;;
  *                      ) ${ECHO} "$OSTYPE"
                           ${ECHO} "Not supported."
                           exit
                           ;;
esac
${ECHO} "Configuring RAT v$VERSION for $OSTYPE"

case $OSTYPE in
  SunOS   ) CC="gcc"
            WFLAGS=$GCCWFLAGS
	    INCLUDE="-I/usr/ucl/X11/include -I/usr/demo/SOUND"
	    LDLIBS="-lXext -lX11 -L/usr/demo/SOUND -laudio -lm"
	    AUDIO="auddev_sparc.o"
	    DEBUG="-g"
	    CHAR="-fsigned-char"
	    OPTIMIZE="-O4"
	    PROFILE="-pg"
            ;;
  Solaris ) CC="gcc -pipe"
            WFLAGS=$GCCWFLAGS
	    INCLUDE="-I/usr/demo/SOUND/include -I/usr/openwin/include"
	    LDLIBS="-L/usr/openwin/lib -lXext -lX11 -L/usr/demo/SOUND/lib -laudio -lsocket -ldl -lnsl -lm"
	    AUDIO="auddev_sparc.o"
	    DEBUG="-g"
	    CHAR="-fsigned-char"
	    OPTIMIZE="-O4"
	    PROFILE="-pg"
	    ECHO=/usr/bin/echo
            ;;
  IRIX    ) CC="gcc"
            WFLAGS=$GCCWFLAGS
	    INCLUDE=""
	    LDLIBS="-L/usr/lib/X11 -lX11 -laudio -lm"
	    AUDIO="auddev_sgi.o"
	    DEBUG="-g"
	    CHAR="-fsigned-char"
	    OPTIMIZE="-O$"
	    PROFILE="-pg"
            ;;
  Linux   ) CC="gcc"
            WFLAGS=$GCCWFLAGS
	    INCLUDE="-I/usr/X11R6/include"
	    LDLIBS="-L/usr/X11R6/lib -lX11 -lm -ldl"
	    AUDIO="auddev_oss.o"
	    DEBUG="-g"
	    CHAR="-fsigned-char"
	    OPTIMIZE="-O4"
	    PROFILE="-pg"
	    ECHO="echo -e"
            ;;
  FreeBSD ) CC="gcc"
            WFLAGS=$GCCWFLAGS
	    INCLUDE="-I/usr/X11R6/include -I/usr/local/include"
	    LDLIBS="-L/usr/X11R6/lib -lXext -lX11 -lm"
	    TCL_LIBS="../tk-8.0/unix/libtk80.a ../tcl-8.0/unix/libtcl80.a"
	    AUDIO="auddev_luigi.o"
	    DEBUG="-g"
	    CHAR="-fsigned-char"
	    OPTIMIZE="-O4"
	    PROFILE="-pg"
	    ECHO=/bin/echo
            ;;
  HPUX    ) CC="gcc"
            WFLAGS=$GCCWFLAGS
	    INCLUDE="-I/usr/include/X11"
	    LDLIBS="-L/usr/lib/X11R5 -lXext -lX11 -lAlib -lm -ldld"
	    AUDIO="auddev_hpux_raw.o"
	    DEBUG="-g"
	    CHAR="-fsigned-char"
	    OPTIMIZE="-O4"
	    PROFILE="-pg"
            ;;
  NetBSD )  CC="gcc"
            WFLAGS=$GCCWFLAGS
	    INCLUDE="-I/usr/X11R6/include -I/usr/local/include"
	    LDLIBS="-L/usr/X11R6/lib -lXext -lX11 -lm"
	    TCL_LIBS="../tk-8.0/unix/libtk80.a ../tcl-8.0/unix/libtcl80.a"
	    AUDIO="auddev_netbsd.o"
	    DEBUG="-g"
	    CHAR="-fsigned-char"
	    OPTIMIZE="-O4"
	    PROFILE="-pg"
            ;;
esac

# Does linux have pca? FreeBSD does...
if [ -r /usr/include/machine/pcaudioio.h ] ; then
    DEFS="$DEFS -DHAVE_PCA"
    AUDIO="$AUDIO auddev_pca.o"
    INCLUDE="$INCLUDE -I/usr/include/machine"
    ${ECHO} "PCA Audio support found"
fi

# Do we have osprey audio device (AKA SunVideo Plus audio)
O1KHOME=${O1KHOME:=/opt/SUNWo1kp}
if [ -r $O1KHOME/include/oti_audio_device.h ] ; then
    AUDIO="$AUDIO auddev_osprey.o"
    INCLUDE="$INCLUDE -I${O1KHOME}/include"
    DEFS="$DEFS -DHAVE_OSPREY"
    ${ECHO} "Osprey Audio support found"
fi

# Do we need usleep (some irixes)
${ECHO} "Checking for usleep... \c"
cat > configure.usleep.c <<EOF
#include <stdlib.h>
int main()
{
    usleep(0);
    return 0;
}
EOF
${CC} -o configure.usleep.bin configure.usleep.c 2> configure.usleep.out
T=`wc -l configure.usleep.out | awk '{print $1}'`
if [ $T = 0 ]; then
	${ECHO} "yes"
else
	${ECHO} "no"
	DEFS="$DEFS -DNEED_USLEEP"
fi

rm -f configure.usleep.c configure.usleep.bin configure.usleep.out

# Process options to the configure script...
DEBUG2=""
OPTIMIZE2=""
PROFILE2=""
CHECK_FLAG=""
CHECK_LIB=""
while test $# -gt 0
do
	if [ $1 = "-debug" ]; then
		DEBUG2=$DEBUG
		DEFS="$DEFS -DDEBUG"
		${ECHO} "Enabled debug option"
	elif [ $1 = "-optimize" ]; then
		OPTIMIZE2=$OPTIMIZE
		DEFS="-DNDEBUG"
		${ECHO} "Enabled optimize option"
	elif [ $1 = "-profile" ]; then
		PROFILE2=$PROFILE
		${ECHO} "Enabled profile option"
	elif [ $1 = "-bounds" ]; then
		CHECK_FLAG=-fbounds-checking
		CHECK_LIB=-lcheck
		${ECHO} "Enabled bounds checking option" 
	else 
		DEFS="$DEFS $1"
		${ECHO} "Added $1 compile flag"
	fi
	shift
done


# Create Makefile
${ECHO} "Generating Makefile"
${ECHO} "# Generated automatically from Makefile.in" > Makefile
${ECHO} "# DO NOT EDIT THIS FILE" >> Makefile

cat > Makefile.sed <<EOF
s%@OSTYPE@%$OSTYPE%g
s%@CC@%$CC%g
s%@AR@%$AR%
s%@RANLIB@%$RANLIB%
s%@WFLAGS@%$WFLAGS%g
s%@INCLUDE@%-I../common $TCL_INCL $INCLUDE %g
s%@LDLIBS@%$TCL_LIBS -L../common -lcommon $LDLIBS%g
s%@AUDIO@%$AUDIO%g
s%@CHAR@%$CHAR%g
s%@DEBUG@%$DEBUG2%g
s%@OPTIMIZE@%$OPTIMIZE2%g
s%@PROFILE@%$PROFILE2%g
s%@DEFS@%$DEFS%g
s%@CHECK_FLAG@%$CHECK_FLAG%g
s%@CHECK_LIB@%$CHECK_LIB%g
s%@VERSION@%$VERSION%g
EOF

sed -f Makefile.sed Makefile.in >> Makefile
rm  -f Makefile.sed


